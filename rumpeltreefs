#!/usr/bin/env python3
##################################################################################################
#                                                                                                #
#                                    rumpeltreefs                                                #
#                                                                                                #
# Work in progress all-in-one user space file-system implementing a port of RumpelstiltskinFs    #
# as a single file-system on top of pyrumpeltree. This file-system isn't yet operational.        #
# If you want to play around with it for codereview or contribution purposes, do the following:  #
#                                                                                                #
# * On Ubuntu, install 'fuse' (the kernel module) and 'libfuse-dev' (the C dev files)            #
#   using apt-get or aptitude.                                                                   #
#                                                                                                #
#     sudo apt-get install fuse                                                                  #
#     sudo apt-get install libfuse-dev                                                           #
#                                                                                                #
# * Install 'fuse-python' using pip with python3                                                 #
#                                                                                                #
#     python3 -m pip install fuse-python                                                         #
#                                                                                                #
# * Clone this repo                                                                              #
#                                                                                                #
#     git clone https://github.com/pibara/pyrumpeltree.git                                       #
#                                                                                                #
# * Do a CD to the repo dir, create a mount dir, and start this script with the -d option        #
#                                                                                                #
#     mkdir mnt                                                                                  #
#     cd pyrumpeltree                                                                            #
#     python3 ./rumpeltreefs ./mnt/ -d                                                           #
#                                                                                                #
#                                                                                                #
#                                        TODO                                                    #
#                                                                                                #
# * Move to using AesInode for inode crypto stuff                                                #
# * Make code pylint3 friendly                                                                   #
# * Implement mkdir /rmdir                                                                       #
# * Implement rmdir                                                                              #
# * Implement symlink and unlink for symlinks                                                    #
# * Implement mknod and unlink for special files.                                                #
# * Create a AESData class for random access crypted data                                        #
# * Implement posibility for AESData to be sparse.                                               #
# * Move to using own-key fragments for AESData (32k?)                                           #
# * Implement open with AESData file handle class                                                #
# * Implement read/write/release                                                                 #
# * Implement truncate/ftruncate                                                                 #
# * Implement lock                                                                               #
# * Implement flush                                                                              #
# * Thread safety, make FS multi threaded                                                        #
# * Get library part on pypi                                                                     #
# * Better secrets + secrets storage.                                                            #
# * Give rumpeltreefs its own repo                                                               #
# * Start + run neatly as its own damon with its own user id.                                    #
# * Add $MP/tmp cleanup daemon                                                                   #
# * Look into writing AppArmor profiles                                                          #
# * Decide if $HOME FS can also be made part of this all-in-one FS, or should be a second FS     #
# * Write $HOME overlay.                                                                         #
# * Write $HOME tool-group profiles for common Linux tools                                       #
# * Test the usage of rumpeltreefs including the $HOME abstraction as $HOME on a desktop system  # 
#   for a few weeks.                                                                             #
# * Find someone to do a security review of the file-system                                      #
# * Write some web pages, possibly on STEEM/UTOPIAN to explain usage and design.                 #
# * Write howto on rumpeltreefs $HOME usage with common crypto currency wallets.                 #
#                                                                                                #
##################################################################################################

import json
import sys
import stat
import errno
import time
import fcntl
import os
from os.path import expanduser, exists
from Crypto.Cipher import AES
from Crypto.Util import Counter
import fuse
import pyrumpeltree
fuse.fuse_python_api = (0, 2)

class DirStat(fuse.Stat):
    def __init__(self):
        self.st_mode = stat.S_IFDIR | 0o700
        self.st_ino = 0
        self.st_dev = 0
        self.st_nlink = 2
        self.st_uid = 0
        self.st_gid = 0
        self.st_size = 4096
        self.st_atime = 0
        self.st_mtime = 0
        self.st_ctime = 0

class TopDirStat(fuse.Stat):
    def __init__(self):
        self.st_mode = stat.S_IFDIR | 0o500
        self.st_ino = 0
        self.st_dev = 0
        self.st_nlink = 6
        self.st_uid = 0
        self.st_gid = 0
        self.st_size = 4096
        self.st_atime = 0
        self.st_mtime = 0
        self.st_ctime = 0

class CapDirStat(fuse.Stat):
    def __init__(self):
        self.st_mode = stat.S_IFDIR | 0o100
        self.st_ino = 0
        self.st_dev = 0
        self.st_nlink = 99999
        self.st_uid = 0
        self.st_gid = 0
        self.st_size = 4096
        self.st_atime = 0
        self.st_mtime = 0
        self.st_ctime = 0


class LinkStat(fuse.Stat):
    def __init__(self):
        self.st_mode = stat.S_IFLNK | 0o700
        self.st_ino = 0
        self.st_dev = 0
        self.st_nlink = 1
        self.st_uid = 0
        self.st_gid = 0
        self.st_size = 4096
        self.st_atime = 0
        self.st_mtime = 0
        self.st_ctime = 0

class FileStat(fuse.Stat):
    def __init__(self, filesize):
        self.st_mode = stat.S_IFREG | 0o600
        self.st_ino = 0
        self.st_dev = 0
        self.st_nlink = 1
        self.st_uid = 0
        self.st_gid = 0
        self.st_size = filesize
        self.st_atime = 0
        self.st_mtime = 0
        self.st_ctime = 0

class DataStat(fuse.Stat):
    def __init__(self, ddict):
        self.st_mode = ddict["mode"]
        self.st_ino = ddict["ino"]
        self.st_dev = ddict["dev"]
        self.st_nlink = ddict["nlink"]
        self.st_uid = ddict["uid"]
        self.st_gid = ddict["gid"]
        self.st_size = ddict["size"]
        self.st_atime = ddict["atime"]
        self.st_mtime = ddict["mtime"]
        self.st_ctime = ddict["ctime"]

class AesInode:
    def __init__(self, storage, localname=None, create_if_not_exist=False,
                 create_node_type=stat.S_IFDIR, parent_storage=None):
        #The pathe where the storage file should reside if it exists.
        epath = "~/.rumpeltree/" + storage() + ".dat"
        path = os.path.expanduser(epath)
        #The file encryption key for this file
        self.fek = storage.crypto_key()
        if os.path.exists(path):
            #If the file exists, read it and decrypt it.
            BS = 16
            ctr = Counter.new(128)
            cipher = AES.new(self.fek, AES.MODE_CTR, counter=ctr)
            self.f = open(path, 'rb+')
            #Lock the file, this becomes important when the FS runs multi threaded.
            fcntl.flock(self.f, fcntl.LOCK_EX | fcntl.LOCK_NB)
            ed = self.f.read()
            padded = cipher.decrypt(ed)
            #Remove padding
            plain = padded[:-ord(padded[len(padded)-1:])]
            #Decode JSON to object
            self.obj = json.loads(plain.decode('utf-8'))
        else:
            if create_if_not_exist:
                #If it doesn't exist, create sub dirs first if needed.
                pathparts = path.split("/")
                gpdir = "/".join(pathparts[:-2])
                pdir = "/".join(pathparts[:-1])
                if not os.path.exists(gpdir):
                    os.mkdir(gpdir)
                if not os.path.exists(pdir):
                    os.mkdir(pdir)
                #Open the new file
                self.f = open(path, 'wb+')
                #Lock the file. This becomes important when the FS runs multi threaded.
                fcntl.flock(self.f, fcntl.LOCK_EX | fcntl.LOCK_NB)
                #Add this node as entry to the parent node if one is specified.
                if parent_storage and localname:
                    pn = AesInode(parent_storage)
                    pn.add_dirent(localname, isdir)
                #No inode yet, lets create one that makes sense.
                now = int(time.time())
                dic = fuse.Fuse.GetContext(self)
                uid = dic["uid"]
                obj = dict()
                obj["stat"] = dict()
                obj["stat"]["mode"] = create_node_type | 0o700
                obj["stat"]["nlink"] = 1
                if create_node_type == stat.S_IFDIR:
                    obj["stat"]["nlink"] = 2
                obj["stat"]["ino"] = 0
                obj["stat"]["dev"] = 0
                obj["stat"]["uid"] = uid
                obj["stat"]["gid"] = uid
                obj["stat"]["size"] = 4096
                obj["stat"]["atime"] = now
                obj["stat"]["mtime"] = now
                obj["stat"]["ctime"] = now
                obj["entries"] = list()
                obj["streams"] = list()
                self.obj = obj
            else:
                raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), path)
    def add_dirent(localname, isdir):
        if not localname in set(self.obj["entries"]):
            self.obj["entries"].append(localname)
            if isdir:
                obj["stat"]["nlink"] += 1
            now = int(time.time())
            obj["stat"]["mtime"] = now
    def __del__(self):
        now = int(time.time())
        self.obj["stat"]["atime"] = now
        data = json.dumps(self.obj)
        BS = 16
        padded = data + (BS - len(data) % BS) * chr(BS - len(data) % BS)
        ctr = Counter.new(128)
        cipher = AES.new(self.fek, AES.MODE_CTR, counter=ctr)
        ed = cipher.encrypt(padded)
        self.f.seek(0, 0)
        self.f.write(ed)
        self.f.truncate()
        fcntl.flock(self.f, fcntl.LOCK_UN)
        self.f.close()

class RumpelTreeFs(fuse.Fuse):
    def __init__(self, dash_s_do, version, usage, secret, cloudsecret, rootsecret):
        self.rt = pyrumpeltree.create_server(secret, cloudsecret)
        self.rootcap = pyrumpeltree.pass2rootcap(rootsecret)
        super(RumpelTreeFs, self).__init__(version=version, usage=usage, dash_s_do=dash_s_do)
    def main(self, args=None):
        fuse.Fuse.main(self, args)
    def normalize_path(self, path):
        parts = path.split("/")[1:]
        if parts[0] == "cap":
            if len(parts) == 1:
                return "", False
            else:
                return "/".join(parts[1:]), False
        rval = None
        cancreate = False
        if parts[0] in ["tmp", "uid", "bin"]:
            dic = fuse.Fuse.GetContext(self)
            uid = dic["uid"]
            pid = dic["pid"]
            cancreate = True
            if parts[0] == "uid":
                rval = self.rootcap + "/" + str(uid) + "/_user"
                if len(parts) > 1:
                    rval += "/" + "/".join(parts[1:])
                    cancreate = False
            elif parts[0] == "tmp":
                rval = self.rootcap + "/" + str(uid) + "/" + str(pid)
                if len(parts) > 1:
                    rval += "/" + "/".join(parts[1:])
                    cancreate = False
            else:
                with open("/proc/" + str(pid) + "/maps") as maps:
                    cmd = maps.readline().split(" ")[-1][:-1]
                rval = self.rootcap + "/" + str(uid) + "/_bin" + cmd
                if len(parts) > 1:
                    rval += "/" + "/".join(parts[1:])
                    cancreate = False
        return rval, cancreate
    def _create_if_not_exist(self, parents, names, childname=None):
        entity = parents.pop()
        name = names.pop()
        storage = entity.storage()
        epath = "~/.rumpeltree/" + storage() + ".dat"
        epath = os.path.expanduser(epath)
        if os.path.exists(epath):
            if childname:
                fek = storage.crypto_key()
                BS = 16
                ctr = Counter.new(128)
                cipher = AES.new(fek, AES.MODE_CTR, counter=ctr)
                f = open(epath, 'rb')
                ed = f.read()
                f.close()
                padded = cipher.decrypt(ed)
                plain = padded[:-ord(padded[len(padded)-1:])]
                dirobj = json.loads(plain.decode('utf-8'))
                dirobj["entries"].append(childname)
                now = int(time.time())
                dirobj["stat"]["atime"] = now
                dirobj["stat"]["mtime"] = now
                data = json.dumps(dirobj)
                padded = data + (BS - len(data) % BS) * chr(BS - len(data) % BS)
                ctr = Counter.new(128)
                cipher = AES.new(fek, AES.MODE_CTR, counter=ctr)
                ed = cipher.encrypt(padded)
                f = open(epath, 'wb')
                f.write(ed)
                f.close()
            return
        else:
            if parents:
                self._create_if_not_exist(parents, names, name)
            dic = fuse.Fuse.GetContext(self)
            uid = dic["uid"]
            dirobj = dict()
            now = int(time.time())
            dirobj["stat"] = dict()
            if childname:
                dirobj["entries"] = [childname]
                dirobj["stat"]["nlink"] = 3
            else:
                dirobj["entries"] = list()
                dirobj["stat"]["nlink"] = 2
            dirobj["streams"] = list()
            dirobj["stat"]["mode"] = stat.S_IFDIR | 0o700
            dirobj["stat"]["ino"] = 0
            dirobj["stat"]["dev"] = 0
            dirobj["stat"]["uid"] = uid
            dirobj["stat"]["gid"] = uid
            dirobj["stat"]["size"] = 4096
            dirobj["stat"]["atime"] = now
            dirobj["stat"]["mtime"] = now
            dirobj["stat"]["ctime"] = now
            data = json.dumps(dirobj)
            fek = storage.crypto_key()
            BS = 16
            padded = data + (BS - len(data) % BS) * chr(BS - len(data) % BS)
            ctr = Counter.new(128)
            cipher = AES.new(fek, AES.MODE_CTR, counter=ctr)
            ed = cipher.encrypt(padded)
            pathparts = epath.split("/")
            gpdir = "/".join(pathparts[:-2])
            pdir = "/".join(pathparts[:-1])
            if not os.path.exists(gpdir):
                os.mkdir(gpdir)
            if not os.path.exists(pdir):
                os.mkdir(pdir)
            f = open(epath, 'wb')
            f.write(ed)
            f.close()
    def _path_object(self, path, cancreate=False):
        if not path:
            return None, None, None
        parts = path.split("/")
        if not parts:
            return None, None, None
        try:
            entity = self.rt[parts[0]]
            if cancreate:
                parents = [entity]
                names = [parts[0]]
            for part in parts[1:]:
                entity = entity[part]
                if cancreate:
                    parents.append(entity)
                    names.append(part)
            if cancreate:
                self._create_if_not_exist(parents, names)
            storage = entity.storage()
        except:
            return None, None, None
        epath = "~/.rumpeltree/" + storage() + ".dat"
        epath = os.path.expanduser(epath)
        fek = storage.crypto_key()
        BS = 16
        ctr = Counter.new(128)
        cipher = AES.new(fek, AES.MODE_CTR, counter=ctr)
        f = open(epath, 'rb')
        ed = f.read()
        f.close()
        padded = cipher.decrypt(ed)
        plain = padded[:-ord(padded[len(padded)-1:])]
        if len(parts) > 1:
            subent = entity[parts[1]].cap()
            return json.loads(plain.decode('utf-8')), parts[1], subent
        else:
            return json.loads(plain.decode('utf-8')), None, None
    def getattr(self, path):
        if path == "/":
            return TopDirStat()
        if path == "/cap":
            return CapDirStat()
        normpath, cancreate = self.normalize_path(path)
        print("NORMPATH:", path, normpath, cancreate)
        pobj, sub, cap = self._path_object(normpath, cancreate)
        if pobj == None:
            print("* PROBLEM")
            return -errno.ENOENT
        print("* OK")
        st = DataStat(pobj["stat"])
        return st
    def utimens(self, path, ts_acc, ts_mod):
        print("METHOD: utimens", path, ts_acc, ts_mod)
        return 0
    def setattr(self, path, hmm):
        print("METHOD: setattr", path)
        return -errno.EPERM
    def opendir(self, path):
        print("METHOD: opendir", path)
        if path == "/cap":
            return -errno.EPERM
        return 0
    def readdir(self, path, offset):
        print("METHOD: readdir", path)
        print("READDIR:", path, offset)
        tags = ['.', '..']
        topdirs = ["cap", "uid", "bin", "tmp"]
        if path == "/":
            print("ROOT")
            tags += topdirs
            print("TAGS:", tags)
            for r in tags:
                if r == ".":
                    tstat = TopDirStat()
                    print("* ", r, tstat.st_mode, tstat.st_nlink)
                    yield fuse.Direntry(name=r, st_mode=tstat.st_mode, st_nlink=tstat.st_nlink)
                elif r == "..":
                    #FIXME
                    print("* .")
                    yield fuse.Direntry(name=r)
                else:
                    tstat = self.getattr(os.path.join(path, r))
                    print("* ", r, tstat.st_mode, tstat.st_nlink)
                    yield fuse.Direntry(name=r, st_mode=tstat.st_mode, st_nlink=tstat.st_nlink)

        else:
            normpath, cancreate = self.normalize_path(path)
            pobj, sub, cap = self._path_object(normpath, cancreate)
            if pobj == None:
                print("DIRENTS: None")
                return -errno.ENOENT
            dirents = [".", ".."] + pobj["entries"]
            print("DIRENTS:", dirents)
            for r in dirents:
                if r == ".":
                    tstat = self.getattr(path)
                elif r == "..":
                    tstat = self.getattr(os.path.dirname(path))
                else:
                    tstat = self.getattr(os.path.join(path, r))
                yield fuse.Direntry(name=r, st_mode=tstat.st_mode, st_nlink=tstat.st_nlink)
    def readlink(self, path):
        print("METHOD: readlink", path)
        pobj, sub, cap = self._path_object(path)
        return "../" + cap
    def listxattr(self, path, huh):
        print("METHOD: listxattr", path)
        normpath, cancreate = self.normalize_path(path)
        if normpath:
            return ["user.shareable", "user.attenuated"]
        return []
    def getxattr(self, path, name, size):
        print("METHOD: getxattr", path, name, size)
        normpath, cancreate = self.normalize_path(path)
        if normpath:
            if name in ["user.shareable", "user.attenuated"]:
                parts = normpath.split("/")
                entity = self.rt[parts[0]]
                for part in parts[1:]:
                    entity = entity[part]
                if name == "user.shareable":
                    return os.path.join(os.path.abspath(sys.argv[1]), "cap", entity.cap())
                else:
                    return os.path.join(os.path.abspath(sys.argv[1]), "cap",
                                        entity.attenuated().cap())
        else:
            return ""
    def setxattr(self, path, name, val, more):
        print("METHOD: setxattr", path, name, val, more)
        return -errno.EPERM
    def open(self, path, flags):
        print("METHOD: open", path, flags)
        return 0
    def release(self, path, fh):
        print("METHOD: release", path, fh)
        return 0
    def read(self, path, size, offset):
        print("METHOD: read", path, size, offset)
        return 0
    def write(self, path, data, offset):
        print("METHOD: write", path, offset)
        return 0
    def truncate(self, path, len, fh=None):
        print("METHOD: truncate", path, len, fh)
        return 0
    def flush(self, path):
        print("METHOD: flush", path)
        return 0

def runfs(mp, secret, cloudsecret, rootsecret):
    fs = RumpelTreeFs(version='%prog ' + '0.1.0',
                      usage='RumpelTree FileSystem ' + fuse.Fuse.fusage,
                      dash_s_do='setsingle',
                      secret=secret,
                      cloudsecret=cloudsecret,
                      rootsecret=rootsecret)
    fs.parse(errex=1)
    fs.flags = 0
    fs.multithreaded = 0
    fs.main()

RUMPELDIR = expanduser("~") + "/.rumpeltree"
if not exists(RUMPELDIR):
    print("Creating dir : '" + RUMPELDIR + "'")
    os.mkdir(RUMPELDIR)
if len(sys.argv) < 2:
    print("Purpose:")
    print("   Mount repo with at least one existing root directory as a file-system.")
    print("Usage:")
    print("   rumpeltreefs <mountpoint>")
    exit()
if not os.path.isdir(sys.argv[1]):
    print("ERROR: invalid mountpoint given!")
    exit(1)
if os.listdir(sys.argv[1]):
    print("ERROR: Mountpoint must be an empty directory!")
    exit(1)
#FIXME: We need better secrets than this.
runfs(sys.argv[1], b"sst,this is a secret", "", "rumpelstiltskin")
